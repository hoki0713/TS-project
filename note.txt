<What Is TypeScript?>

- A JavaScript Superset
- A Language building up on JavaScript
- Adds new Features + Advantages to JavaScript
- But browser can't execute TypeScript
- TypeScript will be compiled to JavaScript



<Why TypeScript?>

in JavaScript

function add(num1, num2) {
    return num1 + num2;
}

console.log(add('2','3'));
Unwanted Behavior at Runtime...
TypeScript is a 'Tool' that helps developers write better code.


<Core Types>

- number : 1, 5.3, -10... All numbers, no differentiation between integers or floats
- string : 'Hi', "Hi", `Hi`... All text values
- boolean : true, false... Just these two. no "truthy" or "falsy" values
- object: {age: 30}... Any JavaScript object, more specific types(type of object) are possible 
  object types can be created for nested objects.
  ex)
  const product = {
    id: 'abc',
    price: 12.99,
    tags: ['greate-offer', 'hot-and-new'],
    details: {
      title: 'Red Carpet',
      description: 'A greate carpet - almost brand-new!'
    }
  }
  
  ------
  type of object
  {
    id: string;
    price: number;
    tags: string[];
    details: {
      title: string;
      description: string;
    }
  }


- Array: [1,2,3]... Any JavaScript array, type can be flexible or strict (regarding the element types) 
- Tuple: [1,2]... Added by TypeScript: Fixed-length-array
- Enum: enum { NEW, OLD }... Added by TypeScript: Automatically enumerated global constant identifiers
- Any: Any kind of value, no specific type assignment


< Union Type >

Using pipe line (|) so I can add multiple types
ex)
let input1: number | string;
input1 = 1
input1 = 'one'

both will work.
 

< Literal Type >

Some specific string such as 'as-number' or 'as-text' etc..
we can assign the types like..

resultConversion: 'as-number' | 'as-text'

so.. in the function's parameter...

function combine(
    input1: number | string,
    input2: number | string,
    resultConversion: 'as-text' | 'as-number'
    ) { ... }

the third parameter will take only two type of string such as 'as-number' or 'as-text'.


< Type Aliases >
Type aliases can be used to 'create' my own types.
not limited to string union types though..
I can also provide an alias to a object type.

ex1)

type User = { name: string; age: number };
const u1: User = { name: 'Hoki', age: 27 };

ex2)

function greet(user: User) {
  console.log('Hi, I'm' + user.name);
}


< Return Type >

- void: if function return nothing, then it's void type.
 
  ex)
  function resultLog(num: number): void {
    console.log('result: ' + num);
  }

** undefined : function don't use undefined return type. theoretically it's possible.. like this..

function someFu(): undefined { return; } << it works
let someValue: undefind; << it works
function someFu(): undefind {} << it doesn't work

< Function Type >

TypeScript has Function type.
but type Function can be any function regardless parameter or return type.

ex)
let anyFunction: Function; << variable anyFunction can be literally any function.

But,
if I want to specify a function as type. then use arrow function.

ex)
want to specify a function that takes 2 number parameters and return number.

let someFunction: (a: number, b: number) => number; 

-----

< Callback Type >

function addAndHandle(n1: number, n2: number, cb: (num: number) => void) {
  const result = n1 + n2;
  cb(result);
}

addAndHandle(10, 20, (result) => {console.log(result)})

if Callback function's return type is void, we can return something but void type will ignore the return value.

and when we specify callback function's type, we can decide how many and what types of parameters the function will take. So, the addAndHandle function's callback function takes only one number parameter but if we send any other types or more than one parameter, it will show it's error.


< Unknown Type >

Unknown type is maybe similar with Any type but it's different.
For example...

let userInput: unknown;
let userName: string;

userName = userInput; << that makes error.

unknown type is not guarantee to be a string.
but any type can be literally any types so it doesn't make error.
unknown is more restrictive than any.

if I use unknown type then I need to do another type check.
for example..

if (typeof userInput === 'string') {
  userName = userInput;
}

this code will not make error.
unknown is better choice than any. (but union type is better than unknown)


< never type >

if I use never type for function's return type, then I can be very clear that this function will not return anything. So, usually when 'throw' some error or infinite loop (while (true) {...}) use that never return type.



** JavaScript VS TypeScript **
- The key difference is: JavaScript uses "dynamic types" (resolved at runtime). TypeScript uses "static types" (set during development).


[Tip!]
- The core primitive types in TypeScript are all lowercase!
string(o) String(x) number(o) Number(x)



------------------------------------------------------------------


Module 2


1. Watch mode
tsc app.ts -w or tsc app.ts --watch
-> automatically compile the app.ts to app.js.
but I can use only one .ts file.

2. Multiple ts files 
tsc --init
-> It will make tsconfig.json file. That means this project will be TypeScript project. After making tsconfig.json file, if I enter just 'tsc' not pointing some specific ts file, then all .ts files in the folder will compile to .js file.

3. Including & Excluding Files
"tsconfig.json" file is crucial file for managing the project. This file tells TypeScript how it should compile.

- "exclude": [ 
  "analytics.ts",
  "analytics.dev.ts", 
  "*.dev.ts", 
  "**/*.dev.ts", 
  "node_modules"   => would be the default.
] => I can put some specific ts files that I will not compile.

- "include": [
  "app.ts"
]

4. useful tsconfig.json options
- sourceMap : in the browser inspect, I can see the source files but if I compile the ts files to js file, it's not what I directly write so probably hard to read. But if I set the sourceMap to true then I can see ts files in the inspect so it makes me easier to debug.


---------

SECTION 5 - Classes & Interfaces

Objects => The things you work with in code.
	=> Instances of classes (= based on classes)
	=> Class-based creation is an alternative to using obejct literals

Classes => Blueprints for objects(theoretical definition)
	=> Define how objects look like, which properties and methods they have.
	=> Classes make creation of multiple, similar objects much easier.
 


